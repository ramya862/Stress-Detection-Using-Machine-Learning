# -*- coding: utf-8 -*-
"""Binary classification example.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OuB0KtO1SaFZMfltM_dcy0iModoB6RSF
"""

import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
from sklearn.naive_bayes import BernoulliNB
from sklearn.feature_extraction.text import CountVectorizer

from google.colab import drive
drive.mount('/content/drive')

#loading the dataset
df=pd.read_csv("/content/drive/MyDrive/Delete folder/Share 'training.1600000.processed.noemoticon.csv'",encoding="latin-1")

df.columns = ["label", "Id", "date", "query", "username", "text"]

#getting first 5 records
df.head(10)

df.shape

#dropping unwanted columns
df=df.drop(["Id","date","query","username"],axis=1)

df.shape

#binarization
#0 indicates negative
#4 indicates positive
np.unique(df["label"])

np.unique(df["text"])

data_pos = df[df['label'] == 4]
data_neg = df[df['label'] == 0]

#Taking 20000 records from each positive and negative data
data_pos = data_pos.iloc[:int(2000)]
data_neg = data_neg.iloc[:int(2000)]

#Creating a Df by concatenating data_pos and data_neg
data = pd.concat([data_pos, data_neg])

#vectorization
#creating sparse matrix using CountVectorizer
#converting df columns to individual array
x=data["text"].values
y=data["label"].values
#creating count vectorizer object
cv=CountVectorizer()
#transforming values
x=cv.fit_transform(x)
v=x.toarray()
#printing sparse matrix
print(v)

#Data arrangement
#shifting target column to the end
first_col=df.pop('text')
df.insert(0,'text',first_col)
df

#the Sklearn train_test_split function splits a dataset into training data and test data.

from sklearn.model_selection import train_test_split
train_x, test_x, train_y, test_y = train_test_split(x, y, test_size=0.3, random_state=2)

#training
bnb=BernoulliNB(binarize=0.0)
model=bnb.fit(train_x,train_y)
y_pred_train=bnb.predict(train_x)
y_pred_test=bnb.predict(test_x)

#results
print(bnb.score(train_x,train_y)*100)
print(bnb.score(test_x,test_y)*100)

#Classification reports
#for training set
from sklearn.metrics import classification_report
print(classification_report(train_y,y_pred_train))

#for testing set
from sklearn.metrics import classification_report
print(classification_report(test_y,y_pred_test))

